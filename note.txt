If Blocks:
- A block can be quite complex, including furhter "if" and "else" blocks (and much more) contained within it.
- When testsing for equality, we can't use a single = symbol. = is used for assigning values to cariables, 
so when testing for equality we have to use ==
- An if statement can inclide many elid parts, but there can be only one else. elif is short for "else if"
- The "else", if there is one, must come eafter all the "elif" blocks
- Duplicating code is generally a bad idea -  there's almost always a better way.

Conditional Operators:
- When testing conditions, we can use any of the value comparison operators.
- There are other types of comparisons we can perform, but we'll focus on these 6 for now:

++++++++++++++++++++++++++++++++++++++++++
|Condition                    | Symbols  |
++++++++++++++++++++++++++++++++++++++++++
|    Less than               |  >        |
|    Less than or equal to   | <=        |
|    Greater Than            | >         |
|    Greater than or equal to| >=        |
|    Equal to                | ==        |
|    Not equal to            | !=        |
++++++++++++++++++++++++++++++++++++++++++

Using "and":
- Let's say you were ask this question:
    Would you like an uncomfortable seat "and" an ice cream?
-> If you answer yes to that question, you may enjoy the ice cream, but you wont be very comfortable.
you've agreed to "both" parts of the condition 

Using "or":

- On the other hand, the question may have been phrased as:
    Would you like an uncomfortable sear "or" an ice cream?
-> That allows you to choose either one of the options.
This analogy falls down slightly, because in English there's an implication that you can only have one or the other.


"and" Truth Table
++++++++++++++++++++++++++++++++++
+    N/A     |   True    | False +
+    True    |   True    | False +
+    False   |   False   | False +
++++++++++++++++++++++++++++++++++

- To find out the result of using "and" with 2 conditions, read the value at the intersection of 
the 2 values that are being anded together


"or" Truth Table
++++++++++++++++++++++++++++++++++
+    N/A     |   True    | False +
+    True    |   True    | True  +
+    False   |   True    | False +
++++++++++++++++++++++++++++++++++

- The "or" Truth table works in the same way, but the results are different of course.
- To find the result of using "or" with 2 conditions, read the value at the intersection of the 2 
values that are being ored together.


Simplify Chained Comparisons: 

- When comparing conditions using "and", Python will stop checking as soon as it finds a condition 
that is "False".

- When comparing conditions using "or", it will stop as soon as it finds one that is "True"


Boolean Values:
- A Boolean value is a value that can either be "true" or "false"
- Those are the only 2 values that a Boolean can have.

True and False:

Python defines 2 constants:
 > True
 > False
- Note that they're written with a captial letter. All names, in Python, are case sensitive.
- True has a capital T, and False has a capital F.

Boolean Expressions:
- A Boolean expression is an expression that evaluates to either "True" or "False"
> We've seen a few Boolean expressions - things like
    age >= 16
for example.
- Boolean expressions aren't restricted to just testing numbers. We could also test a string value:
    name == "Tim"
is a Boolean expression that will evaluate to "True" if the value of name is the string Tim. It will evaluate to "False" if name has any other value.
- Boolean expressions can be very complex.
 > For example, you might have a condition such as:

if day == "Saturday" and temperature . 27 and not raining:
    print ("go swimming")

- In that example (^) raining is a Boolean variable. It has the value "True" or "False". 
- "not" is used to reverse the value. 

"not": 
- We can use "not" to reverse a Boolean value.
 > not True is "False"
 > not False is "True"


For Loops and While Loops
- Python provides several ways to repeat a block of code - things like:
 > for loops
 > while loops
 List comprehensions and generator expressions
 
- A "for" loop works by iterating over some set of values.
 It assigns each of the values, one by one, to one or more variables
 It then executes a block of code once for each value.
 
- The set of values comes from a "sequence, or some other iterable object."
 We've seen one sequence type - the string type. 
 An "iterable" object is anything that can be iterated over. That means a "sequence" is also an iterable
 In simple terms, you can use it with a "for" loop, then it's "iterable"\


String.py notes:
Stepping through a for loop

In that case, we should examin each character in the number string, to check if it's a digit or not. As we saw in the previous video, a for lop can be used to do that.

We're going to interate over numbers and append anything that isnt a digit to the separators string.


Iterating over a range of values
- In those languages, you provide a starting string value and an ending value, and increment a variable each time round the loop.

- Python's different approach to "for" loops makes them incredibly powerful and also very flexible.

we can get the same effect as C "for" loops, by iterating over a range of values.

- Ranges work in the same way -> the last value is specified is not included
- range produces a range of numbers - from the starting value, up to but not including the end value.